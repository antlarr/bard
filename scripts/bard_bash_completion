_bard_compfile()
{
        local IFS=$'\t\n'
	COMPREPLY=( "${COMPREPLY[@]}" $( compgen -f -- "$cur" ) )
}

_bard() {
        local cmd cur prev opts
        COMPREPLY=()
        cur="${COMP_WORDS[COMP_CWORD]}"
        prev="${COMP_WORDS[COMP_CWORD-1]}"
        prev2="${COMP_WORDS[COMP_CWORD-2]}"
	cmd="${COMP_WORDS[1]}"

	if [ "$COMP_CWORD" == "1" ]; then
            opts="find-duplicates find-audio-duplicates compare-dirs compare-files compare-songs scan-file fix-mtime fix-checksums fix-ratings add-silences check-songs-existence check-checksums import info ls list list-genres list-similars list-roots fix-genres play fix-tags update set-rating stats web passwd backup update-musicbrainz-ids check-musicbrainz-tags cache-musicbrainz-db analyze-songs update-musicbrainz-artists process-songs mb-update mb-import calculate-dr"
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
	fi
	if [ "$COMP_CWORD" -lt "1" ]; then
	    return 1
	fi

        case "${cmd}" in
                "find-audio-duplicates")
                        opts="\--from-song-id"
                        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                ;;
                "compare-songs"|"compare-files")
			_bard_compfile
                        opts="-i"
			COMPREPLY=( "${COMPREPLY[@]}" $(compgen -W "${opts}" -- ${cur})  )
                ;;
                "compare-dirs")
			_bard_compfile
                        opts="-s"
			COMPREPLY=( "${COMPREPLY[@]}" $(compgen -W "${opts}" -- ${cur})  )
                ;;
                "scan-file")
			_bard_compfile
                        opts="\--print-match-info"
			COMPREPLY=( "${COMPREPLY[@]}" $(compgen -W "${opts}" -- ${cur})  )
                ;;
                "add-silences")
			_bard_compfile
                        opts="-t \--threshold -l \--min-length -s \--silence-at-start -e \--silence-at-end -d \--dry-run"
			COMPREPLY=( "${COMPREPLY[@]}" $(compgen -W "${opts}" -- ${cur})  )
                ;;
                "check-songs-existence")
			_bard_compfile
                        opts="-v"
			COMPREPLY=( "${COMPREPLY[@]}" $(compgen -W "${opts}" -- ${cur})  )
                ;;
                "info")
			_bard_compfile
                        opts="-p -a \--show-analysis \--show-decode-messages"
			COMPREPLY=( "${COMPREPLY[@]}" $(compgen -W "${opts}" -- ${cur})  )
                ;;
                "ls"|"list")
			_bard_compfile
                        opts="-l -d -i \--id -r \--root -g \--genre \--duration \--rating \--my-rating \--others-rating"
			COMPREPLY=( "${COMPREPLY[@]}" $(compgen -W "${opts}" -- ${cur})  )
                ;;
                "list-similars")
                        opts="-l"
                        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                ;;
                "list-genres")
			_bard_compfile
                        opts="-r -q \--quoted"
			COMPREPLY=( "${COMPREPLY[@]}" $(compgen -W "${opts}" -- ${cur})  )
                ;;
                "list-roots")
			_bard_compfile
                        opts="-q \--quoted"
			COMPREPLY=( "${COMPREPLY[@]}" $(compgen -W "${opts}" -- ${cur})  )
                ;;
                "play")
			_bard_compfile
                        opts="\--shuffle \--sh -r \--root -g \--genre \--rating \--my-rating \--others-rating"
			COMPREPLY=( "${COMPREPLY[@]}" $(compgen -W "${opts}" -- ${cur})  )
                ;;
                "update")
			_bard_compfile
                        opts="-v \--process"
			COMPREPLY=( "${COMPREPLY[@]}" $(compgen -W "${opts}" -- ${cur})  )
                ;;
                "set-rating")
			_bard_compfile
                        opts="-p"
			COMPREPLY=( "${COMPREPLY[@]}" $(compgen -W "${opts}" -- ${cur})  )
                ;;
                "stats")
                        opts="-v \--verbose"
                        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                ;;
                "update-musicbrainz-ids")
                        opts="-v \--verbose"
                        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                ;;
                "check-musicbrainz-tags")
                        opts="-v \--verbose"
                        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                ;;
                "cache-musicbrainz-db")
                        opts="-v \--verbose"
                        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                ;;
                "analyze-songs")
                        opts="-v \--verbose \--from-song-id"
                        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                ;;
                "update-musicbrainz-artists")
                        opts="-v \--verbose"
                        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                ;;
                "process-songs")
                        opts="-v \--verbose \--from-song-id"
                        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                ;;
                "mb-update")
                        opts="-v \--verbose"
                        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                ;;
                "mb-import")
                        opts="-v \--verbose \--update"
                        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                ;;
                "calculate-dr")
			_bard_compfile
                ;;
                *)
                return 1
                ;;
        esac
        case "${prev}" in
                "-g"|"\--genre")
                        if ( [[ "$cmd" == "ls" ]] || [[ "$cmd" == "list" ]] || [[ "$cmd" == "play" ]]); then
				mapfile -t opts_genres < <(bard list-genres -q | sed -e "s/\r//g")
				mapfile -t candidates < <(compgen -W "${opts_genres[*]}" -- "${cur}")
			        local comp
                                COMPREPLY=()
                                for comp in "${candidates[@]}"; do
                                    COMPREPLY+=("$(printf "%q" "$comp")")
                                done
                        else
                                return 1
                        fi
                ;;
                "-r"|"\--root")
                        if ( [[ "$cmd" == "ls" ]] || [[ "$cmd" == "list" ]] || [[ "$cmd" == "play" ]] || [[ "$cmd" == "list-genres" ]]); then
				# The opts_roots look like directory names, but we don't want to handle them as directories since we want
				# to automatically add a space at the end of the selected completion, so we disable the filenames opt
			        compopt +o filenames
				mapfile -t opts_roots < <(bard list-roots -q)
				mapfile -t candidates < <(compgen -W "${opts_roots[*]}" -- "${cur}")
			        local comp
                                COMPREPLY=()
                                for comp in "${candidates[@]}"; do
                                    COMPREPLY+=("$(printf "%q" "$comp")")
                                done
                        else
                                return 1
                        fi
                ;;
#                "--test")
#                        if ( [[ "$cmd" == "test" ]] ); then
#                                opts="0 1 2 3 4"
#                                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
#                        else
#                                return 1
#                        fi
#                ;;
#                *)
#                return 1
#                ;;
        esac
        return 0
}
complete -F _bard -o filenames bard

