"""core tables

Revision ID: 0b61c8daf4e8
Revises: 
Create Date: 2024-04-28 13:23:34.899568

"""
from alembic import op
import sqlalchemy as sa
import sqlalchemy_utils


# revision identifiers, used by Alembic.
revision = '0b61c8daf4e8'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('albums',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('path', sa.Text(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('path')
    )
    op.create_table('artist_paths',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('path', sa.Text(), nullable=False),
    sa.Column('image_filename', sa.Text(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('path')
    )
    op.create_table('covers',
    sa.Column('path', sa.Text(), nullable=False),
    sa.Column('cover', sa.LargeBinary(), nullable=False)
    )
    op.create_table('enum_codec_values',
    sa.Column('id_value', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.Text(), nullable=True),
    sa.PrimaryKeyConstraint('id_value')
    )
    op.create_table('enum_format_values',
    sa.Column('id_value', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.Text(), nullable=True),
    sa.PrimaryKeyConstraint('id_value')
    )
    op.create_table('enum_library_versions_values',
    sa.Column('id_value', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('bard_audiofile', sa.Text(), nullable=True),
    sa.Column('libavcodec', sa.Text(), nullable=True),
    sa.Column('libavformat', sa.Text(), nullable=True),
    sa.Column('libavutil', sa.Text(), nullable=True),
    sa.Column('libswresample', sa.Text(), nullable=True),
    sa.PrimaryKeyConstraint('id_value')
    )
    op.create_table('enum_playlist_type_values',
    sa.Column('id_value', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.Text(), nullable=True),
    sa.PrimaryKeyConstraint('id_value')
    )
    op.create_table('enum_sample_format_values',
    sa.Column('id_value', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.Text(), nullable=True),
    sa.Column('bits_per_sample', sa.Integer(), nullable=True),
    sa.Column('is_planar', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('id_value')
    )
    op.create_table('songs',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('root', sa.Text(), nullable=False),
    sa.Column('path', sa.Text(), nullable=False),
    sa.Column('filename', sa.Text(), nullable=False),
    sa.Column('mtime', sa.Numeric(precision=20, scale=8), nullable=True),
    sa.Column('title', sa.Text(), nullable=True),
    sa.Column('artist', sa.Text(), nullable=True),
    sa.Column('album', sa.Text(), nullable=True),
    sa.Column('albumartist', sa.Text(), nullable=True),
    sa.Column('track', sa.Integer(), nullable=True),
    sa.Column('date', sa.Text(), nullable=True),
    sa.Column('genre', sa.Text(), nullable=True),
    sa.Column('discnumber', sa.Integer(), nullable=True),
    sa.Column('coverwidth', sa.Integer(), nullable=True),
    sa.Column('coverheight', sa.Integer(), nullable=True),
    sa.Column('covermd5', sa.Text(), nullable=True),
    sa.Column('completeness', sa.REAL(), nullable=True),
    sa.Column('update_time', sa.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
    sa.Column('insert_time', sa.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('path')
    )
    op.create_index('songs_path_idx', 'songs', ['path'], unique=False)
    op.create_table('songs_history',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('song_id', sa.Integer(), nullable=False),
    sa.Column('path', sa.Text(), nullable=False),
    sa.Column('mtime', sa.Numeric(precision=20, scale=8), nullable=True),
    sa.Column('song_insert_time', sa.DateTime(), nullable=True),
    sa.Column('removed', sa.Boolean(), server_default=sa.text('false'), nullable=True),
    sa.Column('sha256sum', sa.Text(), nullable=False),
    sa.Column('last_check_time', sa.DateTime(), nullable=True),
    sa.Column('duration', sa.REAL(), nullable=True),
    sa.Column('bitrate', sa.Integer(), nullable=True),
    sa.Column('audio_sha256sum', sa.Text(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('insert_time', sa.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('songs_history_path_idx', 'songs_history', ['path'], unique=False)
    op.create_index('songs_history_song_id_idx', 'songs_history', ['song_id'], unique=False)
    op.create_table('users',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.Text(), nullable=False),
    sa.Column('password', sa.LargeBinary(), nullable=True),
    sa.Column('active', sa.Boolean(), server_default=sa.text('true'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('album_properties',
    sa.Column('album_id', sa.Integer(), autoincrement=False, nullable=False),
    sa.Column('format', sa.Text(), nullable=True),
    sa.Column('min_bitrate', sa.Integer(), nullable=True),
    sa.Column('max_bitrate', sa.Integer(), nullable=True),
    sa.Column('min_bits_per_sample', sa.Integer(), nullable=True),
    sa.Column('max_bits_per_sample', sa.Integer(), nullable=True),
    sa.Column('min_sample_rate', sa.Integer(), nullable=True),
    sa.Column('max_sample_rate', sa.Integer(), nullable=True),
    sa.Column('min_channels', sa.Integer(), nullable=True),
    sa.Column('max_channels', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['album_id'], ['albums.id'], ondelete='CASCADE')
    )
    op.create_index(op.f('ix_album_properties_album_id'), 'album_properties', ['album_id'], unique=False)
    op.create_table('album_songs',
    sa.Column('song_id', sa.Integer(), autoincrement=False, nullable=False),
    sa.Column('album_id', sa.Integer(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['album_id'], ['albums.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['song_id'], ['songs.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('song_id')
    )
    op.create_index('album_songs_album_id_idx', 'album_songs', ['album_id'], unique=False)
    op.create_index('album_songs_song_id_idx', 'album_songs', ['song_id'], unique=True)
    op.create_table('albums_ratings',
    sa.Column('user_id', sa.Integer(), autoincrement=False, nullable=False),
    sa.Column('album_id', sa.Integer(), autoincrement=False, nullable=False),
    sa.Column('rating', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['album_id'], ['albums.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.UniqueConstraint('user_id', 'album_id', name='albums_ratings_user_id_album_id_key')
    )
    op.create_table('checksums',
    sa.Column('song_id', sa.Integer(), autoincrement=False, nullable=False),
    sa.Column('sha256sum', sa.Text(), nullable=False),
    sa.Column('last_check_time', sa.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
    sa.Column('insert_time', sa.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
    sa.ForeignKeyConstraint(['song_id'], ['songs.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('song_id')
    )
    op.create_table('cuesheets',
    sa.Column('song_id', sa.Integer(), nullable=False),
    sa.Column('idx', sa.Integer(), nullable=False),
    sa.Column('sample_position', sa.Integer(), nullable=False),
    sa.Column('time_position', sa.REAL(), nullable=False),
    sa.Column('title', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['song_id'], ['songs.id'], ondelete='CASCADE')
    )
    op.create_index('cuesheets_song_id_idx', 'cuesheets', ['song_id'], unique=False)
    op.create_table('decode_messages',
    sa.Column('song_id', sa.Integer(), autoincrement=False, nullable=False),
    sa.Column('time_position', sa.REAL(), nullable=True),
    sa.Column('level', sa.Integer(), nullable=True),
    sa.Column('message', sa.Text(), nullable=True),
    sa.Column('pos', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['song_id'], ['songs.id'], ondelete='CASCADE')
    )
    op.create_index('decode_messages_song_id_idx', 'decode_messages', ['song_id'], unique=False)
    op.create_table('decode_properties',
    sa.Column('song_id', sa.Integer(), autoincrement=False, nullable=False),
    sa.Column('codec', sa.Integer(), nullable=False),
    sa.Column('format', sa.Integer(), nullable=False),
    sa.Column('container_duration', sa.REAL(), nullable=True),
    sa.Column('decoded_duration', sa.REAL(), nullable=True),
    sa.Column('container_bitrate', sa.Integer(), nullable=True),
    sa.Column('stream_bitrate', sa.Integer(), nullable=True),
    sa.Column('stream_sample_format', sa.Integer(), nullable=True),
    sa.Column('stream_bits_per_raw_sample', sa.Integer(), nullable=True),
    sa.Column('decoded_sample_format', sa.Integer(), nullable=True),
    sa.Column('samples', sa.Integer(), nullable=True),
    sa.Column('library_versions', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['codec'], ['enum_codec_values.id_value'], ),
    sa.ForeignKeyConstraint(['decoded_sample_format'], ['enum_sample_format_values.id_value'], ),
    sa.ForeignKeyConstraint(['format'], ['enum_format_values.id_value'], ),
    sa.ForeignKeyConstraint(['library_versions'], ['enum_library_versions_values.id_value'], ),
    sa.ForeignKeyConstraint(['song_id'], ['songs.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['stream_sample_format'], ['enum_sample_format_values.id_value'], ),
    sa.PrimaryKeyConstraint('song_id')
    )
    op.create_table('fingerprints',
    sa.Column('song_id', sa.Integer(), autoincrement=False, nullable=False),
    sa.Column('fingerprint', sa.LargeBinary(), nullable=False),
    sa.Column('insert_time', sa.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
    sa.ForeignKeyConstraint(['song_id'], ['songs.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('song_id')
    )
    op.create_table('playlists',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.Text(), nullable=False),
    sa.Column('owner_id', sa.Integer(), nullable=False),
    sa.Column('playlist_type', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['playlist_type'], ['enum_playlist_type_values.id_value'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('properties',
    sa.Column('song_id', sa.Integer(), autoincrement=False, nullable=False),
    sa.Column('format', sa.Text(), nullable=True),
    sa.Column('duration', sa.REAL(), nullable=True),
    sa.Column('bitrate', sa.Integer(), nullable=True),
    sa.Column('bits_per_sample', sa.Integer(), nullable=True),
    sa.Column('sample_rate', sa.Integer(), nullable=True),
    sa.Column('channels', sa.Integer(), nullable=True),
    sa.Column('audio_sha256sum', sa.Text(), nullable=True),
    sa.Column('silence_at_start', sa.REAL(), nullable=True),
    sa.Column('silence_at_end', sa.REAL(), nullable=True),
    sa.ForeignKeyConstraint(['song_id'], ['songs.id'], ),
    sa.PrimaryKeyConstraint('song_id')
    )
    op.create_table('similarities',
    sa.Column('song_id1', sa.Integer(), autoincrement=False, nullable=False),
    sa.Column('song_id2', sa.Integer(), autoincrement=False, nullable=False),
    sa.Column('match_offset', sa.Integer(), nullable=False),
    sa.Column('similarity', sa.REAL(), nullable=False),
    sa.ForeignKeyConstraint(['song_id1'], ['songs.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['song_id2'], ['songs.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('song_id1', 'song_id2', name='similarities_song_id1_song_id2_key')
    )
    op.create_index('similarities_song_id1_idx', 'similarities', ['song_id1'], unique=False)
    op.create_index('similarities_song_id2_idx', 'similarities', ['song_id2'], unique=False)
    op.create_table('songs_mb',
    sa.Column('song_id', sa.Integer(), autoincrement=False, nullable=False),
    sa.Column('releasegroupid', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=True),
    sa.Column('releaseid', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=True),
    sa.Column('releasetrackid', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=True),
    sa.Column('recordingid', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=True),
    sa.Column('confirmed', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['song_id'], ['songs.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('song_id')
    )
    op.create_index('songs_mb_recordingid_idx', 'songs_mb', ['recordingid'], unique=False)
    op.create_index('songs_mb_releasegroupid_idx', 'songs_mb', ['releasegroupid'], unique=False)
    op.create_table('songs_mb_albumartistids',
    sa.Column('song_id', sa.Integer(), autoincrement=False, nullable=False),
    sa.Column('albumartistid', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=False),
    sa.ForeignKeyConstraint(['song_id'], ['songs.id'], ondelete='CASCADE')
    )
    op.create_index('songs_mb_albumartistids_albumartistid_idx', 'songs_mb_albumartistids', ['albumartistid'], unique=False)
    op.create_index('songs_mb_albumartistids_song_id_idx', 'songs_mb_albumartistids', ['song_id'], unique=False)
    op.create_table('songs_mb_artistids',
    sa.Column('song_id', sa.Integer(), autoincrement=False, nullable=False),
    sa.Column('artistid', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=False),
    sa.ForeignKeyConstraint(['song_id'], ['songs.id'], ondelete='CASCADE')
    )
    op.create_index('songs_mb_artistids_artistid_idx', 'songs_mb_artistids', ['artistid'], unique=False)
    op.create_index('songs_mb_artistids_song_id_idx', 'songs_mb_artistids', ['song_id'], unique=False)
    op.create_table('songs_mb_workids',
    sa.Column('song_id', sa.Integer(), autoincrement=False, nullable=False),
    sa.Column('workid', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=False),
    sa.ForeignKeyConstraint(['song_id'], ['songs.id'], ondelete='CASCADE')
    )
    op.create_index('songs_mb_workids_song_id_idx', 'songs_mb_workids', ['song_id'], unique=False)
    op.create_index('songs_mb_workids_workid_idx', 'songs_mb_workids', ['workid'], unique=False)
    op.create_table('songs_ratings',
    sa.Column('user_id', sa.Integer(), autoincrement=False, nullable=False),
    sa.Column('song_id', sa.Integer(), autoincrement=False, nullable=False),
    sa.Column('rating', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['song_id'], ['songs.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.UniqueConstraint('user_id', 'song_id', name='songs_ratings_user_id_song_id_key')
    )
    op.create_table('tags',
    sa.Column('song_id', sa.Integer(), autoincrement=False, nullable=False),
    sa.Column('name', sa.Text(), nullable=False),
    sa.Column('value', sa.Text(), nullable=True),
    sa.Column('pos', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['song_id'], ['songs.id'], ondelete='CASCADE')
    )
    op.create_index('tags_song_id_idx', 'tags', ['song_id'], unique=False)
    op.create_table('playlist_generators',
    sa.Column('playlist_id', sa.Integer(), nullable=False),
    sa.Column('generator', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['playlist_id'], ['playlists.id'], ondelete='CASCADE')
    )
    op.create_table('playlist_songs',
    sa.Column('playlist_id', sa.Integer(), nullable=False),
    sa.Column('song_id', sa.Integer(), nullable=False),
    sa.Column('recording_mbid', sqlalchemy_utils.types.uuid.UUIDType(binary=False), nullable=True),
    sa.Column('pos', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['playlist_id'], ['playlists.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['song_id'], ['songs.id'], ondelete='CASCADE'),
    sa.UniqueConstraint('playlist_id', 'pos', name='playlist_songs_playlist_id_pos_key')
    )
    op.create_index('playlist_songs_playlist_id_song_id_idx', 'playlist_songs', ['playlist_id', 'song_id'], unique=False)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('playlist_songs_playlist_id_song_id_idx', table_name='playlist_songs')
    op.drop_table('playlist_songs')
    op.drop_table('playlist_generators')
    op.drop_index('tags_song_id_idx', table_name='tags')
    op.drop_table('tags')
    op.drop_table('songs_ratings')
    op.drop_index('songs_mb_workids_workid_idx', table_name='songs_mb_workids')
    op.drop_index('songs_mb_workids_song_id_idx', table_name='songs_mb_workids')
    op.drop_table('songs_mb_workids')
    op.drop_index('songs_mb_artistids_song_id_idx', table_name='songs_mb_artistids')
    op.drop_index('songs_mb_artistids_artistid_idx', table_name='songs_mb_artistids')
    op.drop_table('songs_mb_artistids')
    op.drop_index('songs_mb_albumartistids_song_id_idx', table_name='songs_mb_albumartistids')
    op.drop_index('songs_mb_albumartistids_albumartistid_idx', table_name='songs_mb_albumartistids')
    op.drop_table('songs_mb_albumartistids')
    op.drop_index('songs_mb_releasegroupid_idx', table_name='songs_mb')
    op.drop_index('songs_mb_recordingid_idx', table_name='songs_mb')
    op.drop_table('songs_mb')
    op.drop_index('similarities_song_id2_idx', table_name='similarities')
    op.drop_index('similarities_song_id1_idx', table_name='similarities')
    op.drop_table('similarities')
    op.drop_table('properties')
    op.drop_table('playlists')
    op.drop_table('fingerprints')
    op.drop_table('decode_properties')
    op.drop_index('decode_messages_song_id_idx', table_name='decode_messages')
    op.drop_table('decode_messages')
    op.drop_index('cuesheets_song_id_idx', table_name='cuesheets')
    op.drop_table('cuesheets')
    op.drop_table('checksums')
    op.drop_table('albums_ratings')
    op.drop_index('album_songs_song_id_idx', table_name='album_songs')
    op.drop_index('album_songs_album_id_idx', table_name='album_songs')
    op.drop_table('album_songs')
    op.drop_index(op.f('ix_album_properties_album_id'), table_name='album_properties')
    op.drop_table('album_properties')
    op.drop_table('users')
    op.drop_index('songs_history_song_id_idx', table_name='songs_history')
    op.drop_index('songs_history_path_idx', table_name='songs_history')
    op.drop_table('songs_history')
    op.drop_index('songs_path_idx', table_name='songs')
    op.drop_table('songs')
    op.drop_table('enum_sample_format_values')
    op.drop_table('enum_playlist_type_values')
    op.drop_table('enum_library_versions_values')
    op.drop_table('enum_format_values')
    op.drop_table('enum_codec_values')
    op.drop_table('covers')
    op.drop_table('artist_paths')
    op.drop_table('albums')
    # ### end Alembic commands ###
